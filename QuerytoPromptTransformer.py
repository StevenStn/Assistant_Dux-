import google.generativeai as genai
import os
from typing import Optional

""" QUESTIONS

- Pourquoi ne pas utiliser une fonction qui Prompt_transform(Requete) qui prend la requete ; fait l'appel du LLM de Gemini puis lui envoit
la rquete avec l'instruction qu'il est un developpeur web et de transformer la requet en prompt precis ; conscis et tres comprehensible pour un expert en developpement web ?

"""
class QueryToPromptTransformer:
    """
    Classe pour transformer les requ√™tes utilisateur en prompts pr√©cis 
    en utilisant l'API Gemini 2.0
    """
    
    def __init__(self, api_key: str):
        """
        Initialise le transformateur avec la cl√© API Gemini
        
        Args:
            api_key (str): Cl√© API Gemini
        """
        self.api_key = api_key
        self.model = None
        self.configure_api()
    
    def configure_api(self):
        """Configure l'API Gemini avec la cl√© fournie"""
        try:
            genai.configure(api_key=self.api_key)
            # Utiliser Gemini 2.0 Flash pour des r√©ponses rapides
            self.model = genai.GenerativeModel('gemini-2.0-flash-exp')
            print("‚úÖ API Gemini configur√©e avec succ√®s")
        except Exception as e:
            print(f"‚ùå Erreur lors de la configuration de l'API Gemini : {e}")
    
    def transform_query(self, user_query: str, code_context: str = "") -> Optional[str]:
        """
        Transforme une requ√™te utilisateur en prompt pr√©cis pour modification de code
        
        Args:
            user_query (str): Requ√™te de l'utilisateur
            code_context (str): Contexte du code existant (optionnel)
            
        Returns:
            str: Prompt pr√©cis pour le LLM de g√©n√©ration de code
        """
        
        # Template de prompt pour la transformation
        transformation_prompt = f"""
Tu es un expert en transformation de requ√™tes utilisateur en prompts techniques pr√©cis.

MISSION : Transformer la requ√™te utilisateur en un prompt technique d√©taill√© pour un LLM qui doit g√©n√©rer du code HTML/CSS/JS.

R√àGLES IMPORTANTES :
1. Le prompt de sortie doit √™tre TR√àS PR√âCIS et TECHNIQUE
2. Il doit sp√©cifier exactement ce qui doit √™tre fait au niveau du code
3. Il doit mentionner que la r√©ponse doit √™tre encadr√©e par [CODE_START] et [CODE_END]
4. Il doit pr√©ciser que la r√©ponse doit √™tre un **SEUL bloc de code HTML complet**, avec le CSS et le JS int√©gr√©s.
5. Il doit donner des d√©tails sur le style, la structure et les fonctionnalit√©s
6. **Important : Le prompt doit demander que le code g√©n√©r√© ne contienne PAS de blocs Markdown (```html, ```css, etc.) entre [CODE_START] et [CODE_END].**

CONTEXTE DU CODE EXISTANT :
{code_context if code_context else "Aucun contexte fourni"}

REQU√äTE UTILISATEUR :
"{user_query}"

G√âN√àRE UN PROMPT TECHNIQUE PR√âCIS :
"""
        
        try:
            response = self.model.generate_content(transformation_prompt)
            
            if response and response.text:
                return response.text.strip()
            else:
                print("‚ùå Aucune r√©ponse re√ßue de Gemini")
                return None
                
        except Exception as e:
            print(f"‚ùå Erreur lors de la transformation : {e}")
            return None
    
    def create_enhanced_prompt(self, technical_prompt: str) -> str:
        """
        Am√©liore le prompt technique avec des instructions suppl√©mentaires
        
        Args:
            technical_prompt (str): Prompt technique de base
            
        Returns:
            str: Prompt am√©lior√© avec instructions compl√®tes
        """
        
        # NOTE IMPORTANTE : Ce template de prompt est appliqu√© *apr√®s* la transformation initiale.
        # Il doit donc renforcer les instructions cl√©s.
        enhanced_prompt = f"""
{technical_prompt}

INSTRUCTIONS TECHNIQUES SUPPL√âMENTAIRES FINALES POUR LA G√âN√âRATION DE CODE :
- G√©n√®re un code HTML complet et fonctionnel (incluant `<!DOCTYPE html>`, `<html>`, `<head>`, `<body>`).
- Utilise les meilleures pratiques de d√©veloppement web (s√©mantique, accessibilit√©, responsivit√©).
- Inclus des commentaires HTML/CSS pertinents pour expliquer les parties complexes ou les ajouts.
- Le code doit √™tre pr√™t √† √™tre utilis√© directement en ouvrant le fichier HTML.

- **TR√àS IMPORTANT CONCERNANT LE FORMAT DE SORTIE :**
  - **La r√©ponse doit √™tre un SEUL bloc de code HTML complet et valide.**
  - **Le CSS doit √™tre int√©gr√© dans une balise `<style>` situ√©e dans le `<head>` du HTML.**
  - **Le JavaScript (si demand√©) doit √™tre int√©gr√© dans une balise `<script>` (id√©alement √† la fin du `<body>` ou dans le `<head>`).**
  - **OBLIGATOIRE : Encadre l'int√©gralit√© de cette r√©ponse HTML (du `<!DOCTYPE html>` au `</html>`) avec les marqueurs `[CODE_START]` et `[CODE_END]`.**
  - **Ne place aucun texte, commentaire suppl√©mentaire, ou marqueur de bloc de code Markdown (comme ` ```html`, ` ```css`, etc.) *entre* `[CODE_START]` et `[CODE_END]`. Le contenu entre ces marqueurs doit √™tre du HTML pur et valide, pr√™t √† √™tre sauvegard√© directement dans un fichier .html.**

FORMAT DE R√âPONSE ATTENDU (EXEMPLE TR√àS PR√âCIS) :
[CODE_START]
<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Titre de la page</title>
    <style>
        /* Ton CSS int√©gr√© ici */
        body {{ font-family: sans-serif; margin: 20px; }}
        h1 {{ color: #333; text-align: center; }}
    </style>
    </head>
<body>
    <h1>Bienvenue sur ma page !</h1>
    <p>Ceci est un paragraphe d'exemple.</p>
    <script>
        // console.log("Script charg√© !");
    </script>
</body>
</html>
[CODE_END]
"""
        return enhanced_prompt

# Fonction principale de transformation
def transform_user_query(user_query: str, code_context: str = "") -> Optional[str]:
    """
    Fonction principale pour transformer une requ√™te utilisateur
    
    Args:
        user_query (str): Requ√™te de l'utilisateur
        code_context (str): Contexte du code existant
        
    Returns:
        str: Prompt pr√©cis pour g√©n√©ration de code
    """
    
    # Cl√© API Gemini
    # Assurez-vous que cette cl√© est d√©finie de mani√®re s√©curis√©e (ex: variables d'environnement)
    GEMINI_API_KEY = os.getenv("GEMINI_API_KEY", "AIzaSyACLgVtTIE100tJx-PcdH09RfFwSFhoUe0") # Utilisez os.getenv pour une meilleure pratique
    
    # Cr√©er le transformateur
    transformer = QueryToPromptTransformer(GEMINI_API_KEY)
    
    if not transformer.model:
        print("‚ùå Impossible d'initialiser le transformateur de prompt.")
        return None
    
    # √âtape 1 : Transformation de base de la requ√™te utilisateur en prompt technique
    print("üîÑ Transformation de la requ√™te utilisateur en prompt technique en cours...")
    technical_prompt = transformer.transform_query(user_query, code_context)
    
    if not technical_prompt:
        print("‚ùå √âchec de la transformation de la requ√™te en prompt technique.")
        return None
    
    # √âtape 2 : Am√©lioration du prompt technique avec les instructions de formatage et de contenu final
    print("üîÑ Am√©lioration du prompt technique avec les contraintes de format de sortie...")
    final_prompt = transformer.create_enhanced_prompt(technical_prompt)
    
    print("‚úÖ Transformation de la requ√™te termin√©e avec succ√®s. Prompt final g√©n√©r√©.")
    return final_prompt
