#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Test Complet pour l'Assistant Dux
Teste tous les composants et l'orchestration compl√®te
"""

import os
import sys
import time
import json
from datetime import datetime
from typing import Dict, Any, List

# Import de l'Assistant Dux
try:
    from Assistant_Dux import AssistantDux, quick_process
    print("‚úÖ Import Assistant Dux r√©ussi")
except ImportError as e:
    print(f"‚ùå Erreur d'import Assistant Dux : {e}")
    sys.exit(1)

# Import des modules individuels pour tests
try:
    from QuerytoPromptTransformer import transform_user_query
    from Expert_Web_Gemini import generate_web_code
    from Fonction_re_c_Apply import res_Code_Apply
    print("‚úÖ Import modules individuels r√©ussi")
except ImportError as e:
    print(f"‚ùå Erreur d'import modules : {e}")
    sys.exit(1)

class TestAssistantDux:
    """Classe de test compl√®te pour l'Assistant Dux"""
    
    def __init__(self):
        self.test_results = []
        self.test_files = []
        self.start_time = datetime.now()
        
        print("üß™ INITIALISATION DES TESTS ASSISTANT DUX")
        print("=" * 60)
    
    def log_test(self, test_name: str, success: bool, details: str = "", duration: float = 0):
        """Enregistre un r√©sultat de test"""
        result = {
            "test_name": test_name,
            "success": success,
            "details": details,
            "duration": duration,
            "timestamp": datetime.now().isoformat()
        }
        self.test_results.append(result)
        
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {test_name} ({duration:.2f}s)")
        if details:
            print(f"   üìù {details}")
    
    def create_test_file(self, filename: str, content: str = None) -> str:
        """Cr√©e un fichier de test temporaire"""
        if content is None:
            content = """<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Page de Test</title>
</head>
<body>
    <h1>Page de Test</h1>
    <p>Contenu initial pour les tests.</p>
</body>
</html>"""
        
        try:
            with open(filename, "w", encoding="utf-8") as f:
                f.write(content)
            self.test_files.append(filename)
            return filename
        except Exception as e:
            print(f"‚ùå Erreur cr√©ation fichier {filename}: {e}")
            return None
    
    def cleanup_test_files(self):
        """Nettoie les fichiers de test"""
        for filename in self.test_files:
            try:
                if os.path.exists(filename):
                    os.remove(filename)
                    print(f"üóëÔ∏è Fichier supprim√© : {filename}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur suppression {filename}: {e}")
    
    def test_individual_modules(self):
        """Teste chaque module individuellement"""
        print("\n" + "="*60)
        print("üîß TEST DES MODULES INDIVIDUELS")
        print("="*60)
        
        # Test 1: QuerytoPromptTransformer
        start_time = time.time()
        try:
            test_query = "Ajoute un bouton rouge centr√© sur la page"
            prompt = transform_user_query(test_query)
            
            success = prompt is not None and len(prompt) > 50
            details = f"Prompt g√©n√©r√©: {len(prompt) if prompt else 0} caract√®res"
            
        except Exception as e:
            success = False
            details = f"Exception: {str(e)}"
        
        duration = time.time() - start_time
        self.log_test("QuerytoPromptTransformer", success, details, duration)
        
        # Test 2: Expert_Web_Gemini (avec fichier de test)
        start_time = time.time()
        test_file = self.create_test_file("test_gemini.html")
        
        try:
            if prompt:  # Utiliser le prompt du test pr√©c√©dent
                code_response = generate_web_code(prompt, test_file)
                success = (code_response is not None and 
                          "[CODE_START]" in code_response and 
                          "[CODE_END]" in code_response)
                details = f"R√©ponse g√©n√©r√©e: {len(code_response) if code_response else 0} caract√®res"
            else:
                success = False
                details = "Pas de prompt disponible pour le test"
                
        except Exception as e:
            success = False
            details = f"Exception: {str(e)}"
        
        duration = time.time() - start_time
        self.log_test("Expert_Web_Gemini", success, details, duration)
        
        # Test 3: Fonction_re_c_Apply
        start_time = time.time()
        try:
            if success and code_response:  # Si le test pr√©c√©dent a r√©ussi
                apply_success = res_Code_Apply(code_response, test_file)
                success = apply_success
                details = f"Application r√©ussie: {apply_success}"
            else:
                success = False
                details = "Pas de code √† appliquer"
                
        except Exception as e:
            success = False
            details = f"Exception: {str(e)}"
        
        duration = time.time() - start_time
        self.log_test("Fonction_re_c_Apply", success, details, duration)
    
    def test_assistant_dux_initialization(self):
        """Teste l'initialisation de l'Assistant Dux"""
        print("\n" + "="*60)
        print("ü§ñ TEST INITIALISATION ASSISTANT DUX")
        print("="*60)
        
        start_time = time.time()
        try:
            dux = AssistantDux("test_init.html")
            
            success = (dux is not None and 
                      hasattr(dux, 'session_id') and 
                      hasattr(dux, 'default_page_file') and
                      hasattr(dux, 'history'))
            
            details = f"Session ID: {dux.session_id}, Fichier: {dux.default_page_file}"
            
        except Exception as e:
            success = False
            details = f"Exception: {str(e)}"
        
        duration = time.time() - start_time
        self.log_test("Initialisation AssistantDux", success, details, duration)
        
        return dux if success else None
    
    def test_file_creation(self, dux):
        """Teste la cr√©ation automatique de fichiers"""
        print("\n" + "="*40)
        print("üìÑ TEST CR√âATION DE FICHIERS")
        print("="*40)
        
        start_time = time.time()
        test_file = "test_creation.html"
        
        try:
            # S'assurer que le fichier n'existe pas
            if os.path.exists(test_file):
                os.remove(test_file)
            
            success = dux.create_file_if_not_exists(test_file)
            file_exists = os.path.exists(test_file)
            
            success = success and file_exists
            details = f"Fichier cr√©√©: {file_exists}"
            
            if file_exists:
                self.test_files.append(test_file)
                
        except Exception as e:
            success = False
            details = f"Exception: {str(e)}"
        
        duration = time.time() - start_time
        self.log_test("Cr√©ation de fichier", success, details, duration)
    
    def test_complete_workflow(self, dux):
        """Teste le workflow complet"""
        print("\n" + "="*60)
        print("üîÑ TEST WORKFLOW COMPLET")
        print("="*60)
        
        test_queries = [
            {
                "query": "Ajoute un bouton rouge centr√© avec le texte 'Cliquer ici'",
                "expected_elements": ["button", "red", "center"]
            },
            {
                "query": "Change la couleur de fond de la page en bleu clair",
                "expected_elements": ["background", "blue", "body"]
            },
            {
                "query": "Ajoute un titre h1 avec le texte 'Ma Page Web'",
                "expected_elements": ["h1", "titre", "Ma Page Web"]
            }
        ]
        
        for i, test_case in enumerate(test_queries, 1):
            print(f"\nüß™ Test Workflow {i}/{len(test_queries)}")
            print("-" * 40)
            
            start_time = time.time()
            test_file = f"test_workflow_{i}.html"
            
            try:
                # Cr√©er le fichier de test
                self.create_test_file(test_file)
                
                # Traiter la requ√™te compl√®te
                result = dux.process_user_request(test_case["query"], test_file)
                
                success = result["success"]
                details = result["final_message"]
                
                # V√©rifications suppl√©mentaires
                if success:
                    # V√©rifier que le fichier a √©t√© modifi√©
                    if os.path.exists(test_file):
                        with open(test_file, "r", encoding="utf-8") as f:
                            content = f.read()
                        details += f" | Taille finale: {len(content)} caract√®res"
                    
            except Exception as e:
                success = False
                details = f"Exception: {str(e)}"
            
            duration = time.time() - start_time
            self.log_test(f"Workflow Complet {i}", success, details, duration)
    
    def test_quick_process_function(self):
        """Teste la fonction quick_process"""
        print("\n" + "="*40)
        print("‚ö° TEST FONCTION QUICK_PROCESS")
        print("="*40)
        
        start_time = time.time()
        test_file = "test_quick.html"
        
        try:
            success = quick_process(
                "Ajoute un paragraphe avec le texte 'Test quick process'", 
                test_file
            )
            
            # V√©rifier que le fichier existe et contient du contenu
            file_exists = os.path.exists(test_file)
            if file_exists:
                self.test_files.append(test_file)
                with open(test_file, "r", encoding="utf-8") as f:
                    content = f.read()
                details = f"Fichier cr√©√©: {file_exists}, Taille: {len(content)} caract√®res"
            else:
                details = "Fichier non cr√©√©"
                success = False
                
        except Exception as e:
            success = False
            details = f"Exception: {str(e)}"
        
        duration = time.time() - start_time
        self.log_test("Quick Process", success, details, duration)
    
    def test_error_handling(self):
        """Teste la gestion d'erreurs"""
        print("\n" + "="*40)
        print("‚ö†Ô∏è TEST GESTION D'ERREURS")
        print("="*40)
        
        # Test avec fichier inexistant et non cr√©able
        start_time = time.time()
        try:
            dux = AssistantDux()
            
            # Tester avec un chemin invalide
            invalid_path = "/root/impossible/fichier.html"  # Chemin probablement inaccessible
            result = dux.process_user_request("Test erreur", invalid_path)
            
            # Le test r√©ussit si l'erreur est g√©r√©e proprement (pas de crash)
            success = not result["success"]  # On s'attend √† un √©chec contr√¥l√©
            details = "Erreur g√©r√©e correctement sans crash"
            
        except Exception as e:
            success = False
            details = f"Exception non g√©r√©e: {str(e)}"
        
        duration = time.time() - start_time
        self.log_test("Gestion d'erreurs", success, details, duration)
    
    def run_all_tests(self):
        """Lance tous les tests"""
        print("üöÄ LANCEMENT DE TOUS LES TESTS")
        print("=" * 80)
        
        # Tests individuels des modules
        self.test_individual_modules()
        
        # Test d'initialisation
        dux = self.test_assistant_dux_initialization()
        
        if dux:
            # Tests avec l'instance Dux
            self.test_file_creation(dux)
            self.test_complete_workflow(dux)
        
        # Tests de fonctions utilitaires
        self.test_quick_process_function()
        
        # Tests de gestion d'erreurs
        self.test_error_handling()
        
        # Rapport final
        self.generate_final_report()
    
    def generate_final_report(self):
        """G√©n√®re le rapport final des tests"""
        end_time = datetime.now()
        total_duration = (end_time - self.start_time).total_seconds()
        
        print("\n" + "="*80)
        print("üìä RAPPORT FINAL DES TESTS")
        print("="*80)
        
        total_tests = len(self.test_results)
        successful_tests = sum(1 for r in self.test_results if r["success"])
        failed_tests = total_tests - successful_tests
        
        print(f"üïê Dur√©e totale des tests : {total_duration:.2f} secondes")
        print(f"üìà Tests ex√©cut√©s : {total_tests}")
        print(f"‚úÖ Tests r√©ussis : {successful_tests}")
        print(f"‚ùå Tests √©chou√©s : {failed_tests}")
        print(f"üìä Taux de r√©ussite : {(successful_tests/total_tests)*100:.1f}%")
        
        print(f"\nüìã D√âTAIL DES R√âSULTATS :")
        print("-" * 80)
        
        for i, result in enumerate(self.test_results, 1):
            status = "‚úÖ" if result["success"] else "‚ùå"
            print(f"{i:2d}. {status} {result['test_name']:<30} ({result['duration']:.2f}s)")
            if result["details"]:
                print(f"     üìù {result['details']}")
        
        # Tests √©chou√©s en d√©tail
        failed_results = [r for r in self.test_results if not r["success"]]
        if failed_results:
            print(f"\n‚ùå TESTS √âCHOU√âS EN D√âTAIL :")
            print("-" * 80)
            for result in failed_results:
                print(f"‚Ä¢ {result['test_name']}")
                print(f"  üìù {result['details']}")
                print(f"  üïê {result['timestamp']}")
                print()
        
        # Recommandations
        print(f"\nüí° RECOMMANDATIONS :")
        print("-" * 80)
        
        if failed_tests == 0:
            print("üéâ Tous les tests sont pass√©s ! L'Assistant Dux est pr√™t √† √™tre utilis√©.")
        elif failed_tests <= 2:
            print("‚ö†Ô∏è Quelques tests ont √©chou√©. V√©rifiez les configurations API et les permissions de fichiers.")
        else:
            print("üîß Plusieurs tests ont √©chou√©. V√©rifiez l'installation et la configuration compl√®te.")
        
        print(f"\n{'='*80}")
        
        # Sauvegarder le rapport
        self.save_report_to_file()
    
    def save_report_to_file(self):
        """Sauvegarde le rapport dans un fichier JSON"""
        try:
            report_data = {
                "test_session": {
                    "start_time": self.start_time.isoformat(),
                    "end_time": datetime.now().isoformat(),
                    "total_tests": len(self.test_results),
                    "successful_tests": sum(1 for r in self.test_results if r["success"]),
                    "failed_tests": sum(1 for r in self.test_results if not r["success"])
                },
                "test_results": self.test_results
            }
            
            with open("test_report_assistant_dux.json", "w", encoding="utf-8") as f:
                json.dump(report_data, f, indent=2, ensure_ascii=False)
            
            print("üíæ Rapport sauvegard√© dans : test_report_assistant_dux.json")
            
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur sauvegarde rapport : {e}")


def main():
    """Fonction principale"""
    print("üß™ SCRIPT DE TEST ASSISTANT DUX")
    print("D√©marrage des tests automatis√©s...")
    print()
    
    # Cr√©er et lancer les tests
    tester = TestAssistantDux()
    
    try:
        tester.run_all_tests()
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Tests interrompus par l'utilisateur")
    except Exception as e:
        print(f"\n‚ùå Erreur critique dans les tests : {e}")
    finally:
        # Nettoyer les fichiers de test
        print("\nüßπ Nettoyage des fichiers de test...")
        tester.cleanup_test_files()
        print("‚úÖ Nettoyage termin√©")


if __name__ == "__main__":
    main()