# code_processor.py
import re
import os
from typing import Optional

"""
Ce module g√®re le traitement final de la r√©ponse de l'IA, 
notamment l'extraction du code et son application au fichier cible.
"""

def extract_code_from_response(llm_response: str) -> Optional[str]:
    """
    Extrait le bloc de code √† partir de la r√©ponse du LLM en utilisant les
    marqueurs [CODE_START] et [CODE_END].

    Args:
        llm_response: La r√©ponse textuelle compl√®te du mod√®le de langage.

    Returns:
        Le code extrait, ou None si les marqueurs ne sont pas trouv√©s.
    """
    try:
        # Utilise une expression r√©guli√®re pour trouver le contenu entre les marqueurs.
        # re.DOTALL permet au '.' de correspondre √©galement aux nouvelles lignes.
        match = re.search(r'\[CODE_START\](.*)\[CODE_END\]', llm_response, re.DOTALL)
        if match:
            # .group(1) capture le contenu entre les parenth√®ses dans le pattern
            code = match.group(1).strip()
            print(f"‚úÖ Code extrait avec succ√®s ({len(code)} caract√®res).")
            return code
        else:
            print("‚ùå Erreur : Marqueurs [CODE_START]/[CODE_END] non trouv√©s dans la r√©ponse.")
            # En cas d'√©chec, on tente une extraction "brute" du HTML pour la r√©tro-compatibilit√©
            html_pattern = r'<!DOCTYPE html>.*</html>'
            html_match = re.search(html_pattern, llm_response, re.DOTALL | re.IGNORECASE)
            if html_match:
                code = html_match.group(0).strip()
                print("‚ö†Ô∏è Avertissement : Extraction effectu√©e sur la base des balises HTML, car les marqueurs √©taient absents.")
                return code
            print("‚ùå √âchec final de l'extraction du code.")
            return None
    except Exception as e:
        print(f"‚ùå Erreur inattendue lors de l'extraction du code : {e}")
        return None

def apply_code_to_file(code: str, target_file_path: str) -> bool:
    """
    √âcrit le code fourni dans le fichier cible, √©crasant son contenu.

    Args:
        code: Le code √† √©crire dans le fichier.
        target_file_path: Le chemin absolu du fichier √† modifier.

    Returns:
        True si l'√©criture a r√©ussi, False sinon.
    """
    if not code:
        print("‚ùå Op√©ration annul√©e : Aucun code √† appliquer.")
        return False
        
    try:
        # S'assurer que le r√©pertoire parent existe
        parent_dir = os.path.dirname(target_file_path)
        if parent_dir:
            os.makedirs(parent_dir, exist_ok=True)
            
        with open(target_file_path, 'w', encoding='utf-8') as f:
            f.write(code)
        
        print(f"üíæ Code appliqu√© avec succ√®s au fichier : {target_file_path}")
        return True
    except IOError as e:
        print(f"‚ùå Erreur d'E/S lors de l'√©criture dans le fichier '{target_file_path}': {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erreur inattendue lors de l'application du code : {e}")
        return False
